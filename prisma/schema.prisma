// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  fullName       String?
  email          String?   @unique
  firstName      String?
  lastName       String?
  birthDay       DateTime?
  publicMetadata Json?
  googleScopes   String[]
  refreshToken   String?
  imageUrl       String?
  provider       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  email_person email_person?
}

model Email {
  id           String   @id @default(cuid())
  threadId     String?   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  emailFromId  String? // Optional: If sender is a registered user
  emailDate    DateTime
  emailSubject String
  emailSnippet String
  emailContent String
  emailHtml    file? @relation("EmailForHtml")
  emailPdf     file? @relation("EmailForPdf")
  attachments  email_attachment[]
  labelIds     String[] @default([])

  sender     email_person?  @relation("EmailFrom", fields: [emailFromId], references: [id])
  recipients EmailToEmail[] 
  thread     thread?        @relation(fields: [threadId], references: [id], onDelete: Cascade)
  @@index([emailFromId])
}

model thread {
  id String @id @default(cuid())
  threadDate DateTime @default(now())
  snippet String? 
  subject String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  historyId String?
  emails Email[]
}

enum FileFormatType {
  image
  video
  html
  pdf
  word
  pptx
  spreadsheet
  other
}

enum FileContent {
  lpLetter
  onePager
  emailAttachment
  deck
  logo
  email
  other
  avatar
  zoomRecording
  zoomTranscript
}

model file {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fileId    String   @default(uuid())

  downloadKey String @default(uuid())

  fileName      String
  fileFormatType  FileFormatType  @default(other)
  fileContentType FileContent @default(other)
  fileSize      Int?

  emailIdForPdf String? @unique
  emailIdForHtml String? @unique

  emailForPdf Email? @relation("EmailForPdf", fields: [emailIdForPdf], references: [id], onDelete: Cascade)
  emailForHtml Email? @relation("EmailForHtml", fields: [emailIdForHtml], references: [id], onDelete: Cascade)
  emailAttachment    email_attachment?
}

model email_attachment {
  id            String                @id @default(cuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  fileId        String                @unique
  fileName      String
  emailId       String?
  email         Email?                @relation(fields: [emailId], references: [id], onDelete: Cascade)
  file          file                  @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([emailId])
}

model email_person {
  id     String  @id @default(cuid())
  userId String? @unique
  email  String
  name   String?

  user           User?               @relation(fields: [userId], references: [id])
  sentEmails     Email[]             @relation("EmailFrom")
  receivedEmails EmailToEmail[]
  createdAt      DateTime            @default(now())

  @@unique([name, email])
  @@index([email])
}


model EmailToEmail {
  id             String  @id @default(cuid()) // Unique ID for this relationship
  emailId        String // Email being sent
  emailPersonId  String // Recipient of the email
  isTo           Boolean @default(false) // True if recipient is in "To" field
  isCc           Boolean @default(false) // True if recipient is in "CC" field
  isBcc          Boolean @default(false) // True if recipient is in "BCC" field

  email        Email             @relation(fields: [emailId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  emailPerson  email_person       @relation(fields: [emailPersonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())

  @@index([emailId])
  @@index([emailPersonId])
}

// model EmailComposeDraft {
//   id           String   @id @default(cuid())
//   emailFromId  String
//   emailSubject String
//   emailContent String
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   sender     email_person   @relation(fields: [emailFromId], references: [id], onDelete: Cascade)
//   recipients EmailToEmail[]

//   @@index([emailFromId])
// }
